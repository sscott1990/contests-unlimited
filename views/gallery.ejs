<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Gallery - All Contest Uploads</title>
  <link rel="stylesheet" href="styles.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body class="gallery-background">
  <nav class="sticky-nav">
    <ul>
      <li><a href="/">Home</a></li>
      <li><a href="/gallery">Gallery</a></li>
      <li><a href="/create.html">Create Contest</a></li>
      <li><a href="/payment.html">Enter Contest</a></li>
      <li><a href="/creator-login.html">Creator Login</a></li>
    </ul>
  </nav>
  <div class="container">
    <h1>Gallery of Contest Uploads</h1>

    <!-- Search Bar -->
    <form class="gallery-search-bar" style="margin-bottom: 2rem;" method="get" action="/gallery">
      <input
        type="text"
        name="search"
        value="<%= typeof search !== 'undefined' ? search.replace(/\"/g, "&quot;") : '' %>"
        placeholder="Search by contest name, entrant name, or host..."
        style="padding: 8px 12px; min-width: 250px; font-size: 1em;"
      />
      <button type="submit" style="padding: 8px 18px;">Search</button>
    </form>

    <div class="gallery-grid" id="gallery-grid">
      <!-- Cards will be inserted here by JS -->
    </div>
    <div class="gallery-loader" id="gallery-loader">Loading more...</div>
    <div id="gallery-end" style="text-align:center; color:#888; margin: 32px 0 0 0; display:none;">No more uploads to show.</div>
  </div>
  <script>
    // Setup for lazy loading
    const grid = document.getElementById('gallery-grid');
    const loader = document.getElementById('gallery-loader');
    const endMsg = document.getElementById('gallery-end');
    let page = 1;
    let loading = false;
    let noMore = false;

    // Get search string from query
    function getQueryParam(param) {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get(param) || '';
    }
    const searchParam = getQueryParam('search');

    // Helper: Sanitize HTML for text
    function sanitize(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    }

    // Render contest winner score block based on contest type and geminiScore
    function renderScoreBlock(upload) {
      if (!upload.isWinner || !upload.geminiScore) return '';
      // Determine contest type by contestName prefix
      let contestType = '';
      if (upload.contestName && upload.contestName.startsWith('caption-contest-')) contestType = 'caption';
      else if (upload.contestName && upload.contestName.startsWith('art-contest-')) contestType = 'art';
      else if (upload.contestName && upload.contestName.startsWith('photo-contest-')) contestType = 'photo';

      let scoreHtml = '<div class="winner-score"><strong>Winner Score:</strong><ul>';
      if (contestType === 'caption') {
        scoreHtml += `<li>Creativity: ${upload.geminiScore.creativity ?? 'N/A'}</li>`;
        scoreHtml += `<li>Humor: ${upload.geminiScore.humor ?? 'N/A'}</li>`;
        scoreHtml += `<li>Relevance: ${upload.geminiScore.relevance ?? 'N/A'}</li>`;
        scoreHtml += `<li>Clarity: ${upload.geminiScore.clarity ?? 'N/A'}</li>`;
        scoreHtml += `<li>Total: ${upload.geminiScore.total ?? 'N/A'}</li>`;
      } else if (contestType === 'art' || contestType === 'photo') {
        scoreHtml += `<li>Creativity: ${upload.geminiScore.creativity ?? 'N/A'}</li>`;
        scoreHtml += `<li>Technique: ${upload.geminiScore.technique ?? 'N/A'}</li>`;
        scoreHtml += `<li>Theme: ${upload.geminiScore.theme ?? 'N/A'}</li>`;
        scoreHtml += `<li>Overall: ${upload.geminiScore.overall ?? 'N/A'}</li>`;
        scoreHtml += `<li>Total: ${upload.geminiScore.total ?? 'N/A'}</li>`;
      }
      scoreHtml += '</ul></div>';
      return scoreHtml;
    }

    function renderCard(upload) {
      // Add a winner badge if this upload is a recent winner
      const winnerTag = upload.isWinner
        ? `<div class="winner-tag" title="Recent Winner">üèÜ Winner</div>`
        : "";

      // Caption contest default
      if (
        upload.contestName === 'caption-contest-default' &&
        upload.contestImageUrl && upload.captionText
      ) {
        return `
          <div class="gallery-card">
            ${winnerTag}
            <img class="gallery-img" src="${sanitize(upload.contestImageUrl)}" alt="Caption Contest Image" loading="lazy">
            <div class="caption-block">
              <strong>Caption:</strong> <span>${sanitize(upload.captionText)}</span>
            </div>
            ${renderScoreBlock(upload)}
            <div class="gallery-info">
              <div><strong>Name:</strong> ${sanitize(upload.name || 'Anonymous')}</div>
              <div><strong>Contest:</strong> ${sanitize(upload.contestName || 'Unknown')}</div>
              <div><strong>Host:</strong> ${sanitize(upload.host || 'Contests Unlimited')}</div>
              <div class="date"><strong>Date:</strong> ${new Date(upload.timestamp).toLocaleDateString()}</div>
            </div>
          </div>
        `;
      }
      // Custom caption contest
      if (
        upload.contestName &&
        upload.contestName.startsWith('caption-contest-') &&
        upload.contestName !== 'caption-contest-default' &&
        upload.contestImageUrl && upload.captionText
      ) {
        return `
          <div class="gallery-card">
            ${winnerTag}
            <img class="gallery-img" src="${sanitize(upload.contestImageUrl)}" alt="Caption Contest Image" loading="lazy">
            <div class="caption-block">
              <strong>Caption:</strong> <span>${sanitize(upload.captionText)}</span>
            </div>
            ${renderScoreBlock(upload)}
            <div class="gallery-info">
              <div><strong>Name:</strong> ${sanitize(upload.name || 'Anonymous')}</div>
              <div><strong>Contest:</strong> ${sanitize(upload.contestName || 'Unknown')}</div>
              <div><strong>Host:</strong> ${sanitize(upload.host || 'Contests Unlimited')}</div>
              <div class="date"><strong>Date:</strong> ${new Date(upload.timestamp).toLocaleDateString()}</div>
            </div>
          </div>
        `;
      }
      // Regular image
      if (upload.presignedUrl && upload.isImageFile) {
        return `
          <div class="gallery-card">
            ${winnerTag}
            <img class="gallery-img" src="${sanitize(upload.presignedUrl)}" alt="Upload by ${sanitize(upload.name)}" loading="lazy">
            ${renderScoreBlock(upload)}
            <div class="gallery-info">
              <div><strong>Name:</strong> ${sanitize(upload.name || 'Anonymous')}</div>
              <div><strong>Contest:</strong> ${sanitize(upload.contestName || 'Unknown')}</div>
              <div><strong>Host:</strong> ${sanitize(upload.host || 'Contests Unlimited')}</div>
              <div class="date"><strong>Date:</strong> ${new Date(upload.timestamp).toLocaleDateString()}</div>
            </div>
          </div>
        `;
      }
      // No image
      return `
        <div class="gallery-card">
          ${winnerTag}
          <div class="no-image">No Image</div>
          ${renderScoreBlock(upload)}
          <div class="gallery-info">
            <div><strong>Name:</strong> ${sanitize(upload.name || 'Anonymous')}</div>
            <div><strong>Contest:</strong> ${sanitize(upload.contestName || 'Unknown')}</div>
            <div><strong>Host:</strong> ${sanitize(upload.host || 'Contests Unlimited')}</div>
            <div class="date"><strong>Date:</strong> ${new Date(upload.timestamp).toLocaleDateString()}</div>
          </div>
        </div>
      `;
    }

    async function loadMore() {
      if (loading || noMore) return;
      loading = true;
      loader.style.display = 'block';

      // API expects ?page=X&search=Y
      const params = new URLSearchParams();
      params.set('page', page);
      if (searchParam) params.set('search', searchParam);
      const res = await fetch(`/api/gallery?${params.toString()}`);
      const data = await res.json();

      if (Array.isArray(data.uploads) && data.uploads.length > 0) {
        for (const upload of data.uploads) {
          grid.insertAdjacentHTML('beforeend', renderCard(upload));
        }
        page++;
      }

      if (data.uploads.length < (data.perPage || 30)) {
        noMore = true;
        endMsg.style.display = 'block';
      }
      loader.style.display = 'none';
      loading = false;
    }

    // Infinite scroll: load more when near bottom
    window.addEventListener('scroll', () => {
      if (noMore || loading) return;
      const scrollPos = window.innerHeight + window.scrollY;
      const threshold = document.body.offsetHeight - 400;
      if (scrollPos >= threshold) loadMore();
    });

    // Initial load
    loadMore();
  </script>
</body>
</html>